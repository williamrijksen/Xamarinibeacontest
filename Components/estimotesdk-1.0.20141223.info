{"Name":"EstimoteSDK","Id":1420,"Alias":"estimotesdk","Description":"This component binds the Estimote SDK for Android so that it may be used in Xamarin.Android projects.\n\nThe system requirements are Android 4.3 and Bluetooth Low Energy.\n\nThe `BeaconManager` class is the primary means of interating with Estimotes. Create an instance of this class, and use the `.Connect` method, passing it `BeaconManager.IServiceReadyCallback` object. When the BeaconManager is up and running, it will notify clients by call `BeaconManager.IServiceReadyCallback.OnServiceReady()`. At this point the client can start ranging or monitoring for the Estimotes.\n\nThe following code shows an example of how to use the `BeaconManager`.\n\n```csharp\n\nusing EstimoteSdk;\nnamespace Estimotes.Droid\n{\n    [Activity(Label = \"NotifyDemoActivity\")]\t\n    public class NotifyDemoActivity : Activity, BeaconManager.IServiceReadyCallback\n    {\n        static readonly int NOTIFICATION_ID = 123321;\n\n        BeaconManager _beaconManager;\n        Region _region;\n\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            SetContentView(Resource.Layout.notify_demo);\n\n            _region = this.GetBeaconAndRegion().Item2;\n            _beaconManager = new BeaconManager(this);\n\n            // Default values are 5s of scanning and 25s of waiting time to save CPU cycles.\n            // In order for this demo to be more responsive and immediate we lower down those values.\n            _beaconManager.SetBackgroundScanPeriod(TimeUnit.Seconds.ToMillis(1), 0);\n            _beaconManager.EnteredRegion += (sender, e) =\u003e {\n                // Do something as the device has entered in region for the Estimote.\n            };\n            _beaconManager.ExitedRegion += (sender, e) =\u003e {\n                // Do something as the device has left the region for the Estimote.            \n            };\n        \n        }\n\n        protected override void OnResume()\n        {\n            base.OnResume();\n            _beaconManager.Connect(this);\n        }\n\n        public void OnServiceReady()\n        {\n            // This method is called when BeaconManager is up and running.\n            _beaconManager.StartMonitoring(_region);\n        }\n\n        protected override void OnDestroy()\n        {\n        \t// Make sure we disconnect from the Estimote.\n            _beaconManager.Disconnect();\n            base.OnDestroy();\n        }\n    }\n}\n\n```\n","Version":"1.0.20141223","Summary":"Estimote SDK for Xamarin.Android. A binding for the Estimote SDK for Android.","QuickStart":"This component binds the Estimote SDK for Android so that it may be used in Xamarin.Android projects.\n\nThe system requirements are Android 4.3 and Bluetooth Low Energy.\n\nThe `BeaconManager` class is the primary means of interating with Estimotes. Create an instance of this class, and use the `.Connect` method, passing it `BeaconManager.IServiceReadyCallback` object. When the BeaconManager is up and running, it will notify clients by call `BeaconManager.IServiceReadyCallback.OnServiceReady()`. At this point the client can start ranging or monitoring for the Estimotes.\n\nThe following code shows an example of how to use the `BeaconManager`.\n\n```csharp\n\nusing EstimoteSdk;\nnamespace Estimotes.Droid\n{\n    [Activity(Label = \"NotifyDemoActivity\")]\t\n    public class NotifyDemoActivity : Activity, BeaconManager.IServiceReadyCallback\n    {\n        static readonly int NOTIFICATION_ID = 123321;\n\n        BeaconManager _beaconManager;\n        Region _region;\n\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            SetContentView(Resource.Layout.notify_demo);\n\n            _region = this.GetBeaconAndRegion().Item2;\n            _beaconManager = new BeaconManager(this);\n\n            // Default values are 5s of scanning and 25s of waiting time to save CPU cycles.\n            // In order for this demo to be more responsive and immediate we lower down those values.\n            _beaconManager.SetBackgroundScanPeriod(TimeUnit.Seconds.ToMillis(1), 0);\n            _beaconManager.EnteredRegion += (sender, e) =\u003e {\n                // Do something as the device has entered in region for the Estimote.\n            };\n            _beaconManager.ExitedRegion += (sender, e) =\u003e {\n                // Do something as the device has left the region for the Estimote.            \n            };\n        \n        }\n\n        protected override void OnResume()\n        {\n            base.OnResume();\n            _beaconManager.Connect(this);\n        }\n\n        public void OnServiceReady()\n        {\n            // This method is called when BeaconManager is up and running.\n            _beaconManager.StartMonitoring(_region);\n        }\n\n        protected override void OnDestroy()\n        {\n        \t// Make sure we disconnect from the Estimote.\n            _beaconManager.Disconnect();\n            base.OnDestroy();\n        }\n    }\n}\n\n```\n","Hash":"0e31ac73a82c8959dbe564164e4a1eb5","TargetPlatforms":["android"],"TrialHash":null}