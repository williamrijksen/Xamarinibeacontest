{"Name":"Android AltBeacon Library","Id":1104,"Alias":"android-altbeacon-library","Description":"A Xamarin.Android binding of the [AltBeacon Android Beacon Library](https://github.com/AltBeacon/android-beacon-library). This library allows Android apps to interact with BLE beacons in accordance with the open and interoperable [AltBeacon proximity beacon protocol specification](https://github.com/AltBeacon/spec).\r\n\r\n##What does this library do?\r\n\r\nAllows Android apps to interact with BLE beacons.\r\n\r\n## Reference Application\r\n\r\nFor a simple working example of Ranging BLE beacons with Xamarin.Android, check out the [Sample Application](https://github.com/chrisriesgo/Android-AltBeacon-Library/tree/master/Samples/Android/AndroidAltBeaconLibrary.Sample).","Version":"2.0","Summary":"Proximity beacon ranging and monitoring library for Xamarin.Android apps.","QuickStart":"## Ranging Example Code\r\n\r\n\tpublic class MainActivity : Activity, IBeaconConsumer\n\t{\n\t\tprivate RelativeLayout _layout;\n\t\tprivate EditText _editText;\n\t\tprivate BeaconManager _beaconManager;\n\t\tprivate long _lineCount = 0;\n\n\t\tpublic MainActivity()\n\t\t{\n\t\t\t_iBeaconManager = IBeaconManager.GetInstanceForApplication(this);\n\n\t\t\t_rangeNotifier = new RangeNotifier();\n\t\t}\n\n\t\tprotected override void OnCreate(Bundle bundle)\n\t\t{\n\t\t\tbase.OnCreate(bundle);\n\n\t\t\tSetContentView(Resource.Layout.Main);\n\n\t\t\t_layout = FindViewById\u003cRelativeLayout\u003e(Resource.Id.layout);\n\t\t\t_editText = FindViewById\u003cEditText\u003e(Resource.Id.monitoringText);\n\n\t\t\t_beaconManager = BeaconManager.GetInstanceForApplication(this);\n\t\t\t\n\t\t\tvar iBeaconParser = new BeaconParser();\n\t\t\tiBeaconParser.SetBeaconLayout(\"m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24\");\n\t\t\t_beaconManager.BeaconParsers.Add(iBeaconParser);\n\t\t\t\n\t\t\t_iBeaconManager.Bind(this);\n\t\t\t_rangeNotifier.DidRangeBeaconsInRegionComplete += RangingBeaconsInRegion;\n\t\t}\n\n\t\tpublic void OnIBeaconServiceConnect()\n\t\t{\n\t\t\t_iBeaconManager.SetRangeNotifier(_rangeNotifier);\n\t\t\t_iBeaconManager.StartRangingBeaconsInRegion(_rangingRegion);\n\t\t}\n\t\t\n\t\tasync void RangingBeaconsInRegion(object sender, RangeEventArgs e)\n\t\t{\n\t\t\tif(e.Beacons.Count \u003e 0)\n\t\t\t{\n\t\t\t\tvar beaconNumber = 0;\n\t\t\t\tvar allBeacons = new List\u003cBeacon\u003e();\n\t\t\t\tforeach(var b in e.Beacons)\n\t\t\t\t{\n\t\t\t\t\tallBeacons.Add(b);\n\t\t\t\t}\n\n\t\t\t\tvar orderedBeacons = allBeacons.OrderBy(b =\u003e b.Distance).ToList();\n\n\t\t\t\torderedBeacons.ForEach(async (firstBeacon) =\u003e\n\t\t\t\t{\n\t\t\t\t\tbeaconNumber++;\n\t\t\t\t\tif(firstBeacon.Distance \u003c= .5)\n\t\t\t\t\t{\n\t\t\t\t\t\t// ~immediate\n\t\t\t\t\t\tawait UpdateDisplay(\"Beacon \" + beaconNumber + \" of \" + \n\t\t\t\t\t\t\torderedBeacons.Count + \n\t\t\t\t\t\t\t\"\\n\" + firstBeacon.Id1 + \"\\nis about \" + \n\t\t\t\t\t\t\tstring.Format(\"{0:N2}\", firstBeacon.Distance) + \n\t\t\t\t\t\t\t\" meters away.\", Color.Red);\n\t\t\t\t\t}\n\t\t\t\t\telse if(firstBeacon.Distance \u003e .5 \u0026\u0026 firstBeacon.Distance \u003c= 10)\n\t\t\t\t\t{\n\t\t\t\t\t\t// ~near\n\t\t\t\t\t\tawait UpdateDisplay(\"Beacon \" + beaconNumber + \" of \" + \n\t\t\t\t\t\t\torderedBeacons.Count + \n\t\t\t\t\t\t\t\"\\n\" + firstBeacon.Id1 + \"\\nis about \" + \n\t\t\t\t\t\t\tstring.Format(\"{0:N2}\", firstBeacon.Distance) + \n\t\t\t\t\t\t\t\" meters away.\", Color.Yellow);\n\t\t\t\t\t}\n\t\t\t\t\telse if(firstBeacon.Distance \u003e 10)\n\t\t\t\t\t{\n\t\t\t\t\t\t// ~far\n\t\t\t\t\t\tawait UpdateDisplay(\"Beacon \" + beaconNumber + \" of \" + \n\t\t\t\t\t\t\torderedBeacons.Count + \n\t\t\t\t\t\t\t\"\\n\" + firstBeacon.Id1 + \"\\nis about \" + \n\t\t\t\t\t\t\tstring.Format(\"{0:N2}\", firstBeacon.Distance) + \n\t\t\t\t\t\t\t\" meters away.\", Color.Blue);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// ~unknown\n\t\t\t\t\t\tawait UpdateDisplay(\"I\u0027m not sure how close you are to the \" + \n\t\t\t\t\t\t\tbeaconNumber + \n\t\t\t\t\t\t\t\" of \" + orderedBeacons.Count + \n\t\t\t\t\t\t\t\" beacon.\\n\", Color.Transparent);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// ~unknown\n\t\t\t\tawait UpdateDisplay(\"I don\u0027t see any beacons nearby.\", Color.Transparent);\n\t\t\t}\n\t\t}\n\n\t\tprotected override void OnDestroy()\n\t\t{\n\t\t\tbase.OnDestroy();\n\t\t\tif(_beaconManager.IsBound(this)) _beaconManager.Unbind(this);\n\t\t}\n\t\n\t\tprivate async Task UpdateDisplay(string message, Color color = default(Color))\n\t\t{\n\t\t\tConsole.WriteLine(message);\n\t\t\tawait Task.Run(() =\u003e\n\t\t\t{\n\t\t\t\tRunOnUiThread(() =\u003e\n\t\t\t\t{\n\t\t\t\t\t_lineCount++;\n\t\t\t\t\t_layout.SetBackgroundColor(color);\n\t\t\t\t\t_editText.Append(_lineCount + \": \" + message + \"\\n\\n\");\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\t\tpublic bool BindService(Intent intent, IServiceConnection conn, int p2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic void OnBeaconServiceConnect()\n\t\t{\n\t\t\t_beaconManager.SetRangeNotifier(_rangeNotifier);\n\n\t\t\t_tagRegion = new AltBeaconOrg.BoundBeacon.Region(\"myUniqueBeaconId\", \n\t\t\t\t\tIdentifier.Parse(\"2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6\"), \n\t\t\t\t\tnull, null);\n\t\t\t_emptyRegion = new AltBeaconOrg.BoundBeacon.Region(\"myEmptyBeaconId\", \n\t\t\t\t\tnull, \n\t\t\t\t\tnull, null);\n\n\t\t\t_beaconManager.StartRangingBeaconsInRegion(_tagRegion);\n\t\t\t_beaconManager.StartRangingBeaconsInRegion(_emptyRegion);\n\n\t\t\t_startButton.Enabled = false;\n\t\t}\n\t}","Hash":"51eed50890ee4f9a07240500001c39ea","TargetPlatforms":["android"],"TrialHash":null}